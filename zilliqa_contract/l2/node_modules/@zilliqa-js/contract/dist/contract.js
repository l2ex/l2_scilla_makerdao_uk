"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var account_1 = require("@zilliqa-js/account");
var core_1 = require("@zilliqa-js/core");
var util_1 = require("@zilliqa-js/util");
var factory_1 = require("./factory");
var NIL_ADDRESS = '0000000000000000000000000000000000000000';
var Contract = /** @class */ (function () {
    function Contract(factory, code, abi, address, init, state) {
        this.factory = factory;
        this.provider = factory.provider;
        this.signer = factory.signer;
        // assume that we are accessing an existing contract
        if (address) {
            this.abi = abi;
            this.address = address;
            this.init = init;
            this.state = state;
            this.status = 0 /* Deployed */;
        }
        else {
            // assume we're deploying
            this.abi = abi;
            this.code = code;
            this.init = init;
            this.status = 2 /* Initialised */;
        }
    }
    /**
     * isInitialised
     *
     * Returns true if the contract has not been deployed
     *
     * @returns {boolean}
     */
    Contract.prototype.isInitialised = function () {
        return this.status === 2 /* Initialised */;
    };
    /**
     * isDeployed
     *
     * Returns true if the contract is deployed
     *
     * @returns {boolean}
     */
    Contract.prototype.isDeployed = function () {
        return this.status === 0 /* Deployed */;
    };
    /**
     * isRejected
     *
     * Returns true if an attempt to deploy the contract was made, but the
     * underlying transaction was unsuccessful.
     *
     * @returns {boolean}
     */
    Contract.prototype.isRejected = function () {
        return this.status === 1 /* Rejected */;
    };
    Contract.prototype.prepareTx = function (tx, attempts, interval) {
        if (attempts === void 0) { attempts = core_1.GET_TX_ATTEMPTS; }
        if (interval === void 0) { interval = 1000; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var response;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.provider.send("CreateTransaction" /* CreateTransaction */, tslib_1.__assign({}, tx.txParams, { priority: tx.toDS }))];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response.error
                                ? tx.setStatus(3 /* Rejected */)
                                : tx.confirm(response.result.TranID, attempts, interval)];
                }
            });
        });
    };
    /**
     * deploy
     *
     * @param {DeployParams} params
     * @returns {Promise<Contract>}
     */
    Contract.prototype.deploy = function (params, attempts, interval, toDs) {
        if (attempts === void 0) { attempts = 33; }
        if (interval === void 0) { interval = 1000; }
        if (toDs === void 0) { toDs = false; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var tx, err_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.code || !this.init) {
                            throw new Error('Cannot deploy without code or initialisation parameters.');
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.prepareTx(new account_1.Transaction(tslib_1.__assign({}, params, { toAddr: NIL_ADDRESS, amount: new util_1.BN(0), code: this.code, data: JSON.stringify(this.init).replace(/\\"/g, '"') }), this.provider, 0 /* Initialised */, toDs), attempts, interval)];
                    case 2:
                        tx = _a.sent();
                        if (tx.isRejected()) {
                            this.status = 1 /* Rejected */;
                            return [2 /*return*/, [tx, this]];
                        }
                        this.status = 0 /* Deployed */;
                        this.address = factory_1.Contracts.getAddressForContract(tx);
                        return [2 /*return*/, [tx, this]];
                    case 3:
                        err_1 = _a.sent();
                        throw err_1;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * call
     *
     * @param {string} transition
     * @param {any} params
     * @returns {Promise<Transaction>}
     */
    Contract.prototype.call = function (transition, args, params, attempts, interval, toDs) {
        if (attempts === void 0) { attempts = 33; }
        if (interval === void 0) { interval = 1000; }
        if (toDs === void 0) { toDs = false; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var data, err_2;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        data = {
                            _tag: transition,
                            params: args,
                        };
                        if (!this.address) {
                            return [2 /*return*/, Promise.reject('Contract has not been deployed!')];
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.prepareTx(new account_1.Transaction(tslib_1.__assign({}, params, { toAddr: this.address, data: JSON.stringify(data) }), this.provider, 0 /* Initialised */, toDs), attempts, interval)];
                    case 2: return [2 /*return*/, _a.sent()];
                    case 3:
                        err_2 = _a.sent();
                        throw err_2;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    Contract.prototype.getState = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var response;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.status !== 0 /* Deployed */) {
                            return [2 /*return*/, Promise.resolve([])];
                        }
                        return [4 /*yield*/, this.provider.send('GetSmartContractState', this.address)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response.result];
                }
            });
        });
    };
    tslib_1.__decorate([
        core_1.sign,
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [account_1.Transaction, Number, Number]),
        tslib_1.__metadata("design:returntype", Promise)
    ], Contract.prototype, "prepareTx", null);
    return Contract;
}());
exports.Contract = Contract;
//# sourceMappingURL=contract.js.map