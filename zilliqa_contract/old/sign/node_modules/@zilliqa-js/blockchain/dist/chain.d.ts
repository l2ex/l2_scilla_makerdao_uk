import { Transaction, Wallet } from '@zilliqa-js/account';
import { ContractObj, Value } from '@zilliqa-js/contract';
import { Provider, ZilliqaModule, RPCResponse, BlockchainInfo, DsBlockObj, BlockList, TxBlockObj, TxList, ShardingStructure } from '@zilliqa-js/core';
import { Omit } from 'utility-types';
export declare class Blockchain implements ZilliqaModule {
    signer: Wallet;
    provider: Provider;
    constructor(provider: Provider, signer: Wallet);
    /**
     * getBlockChainInfo
     *
     * @returns {Promise<RPCResponse<BlockchainInfo, string>>}
     */
    getBlockChainInfo(): Promise<RPCResponse<BlockchainInfo, string>>;
    /**
     * getShardingStructure
     *
     * @returns {Promise<RPCResponse<ShardingStructure, string>>}
     */
    getShardingStructure(): Promise<RPCResponse<ShardingStructure, string>>;
    /**
     * getDSBlock
     *
     * Get details of a Directory Service block by block number.
     *
     * @param {number} blockNum
     * @returns {Promise<RPCResponse<DsBlockObj, string>>}
     */
    getDSBlock(blockNum: number): Promise<RPCResponse<DsBlockObj, string>>;
    /**
     * getLatestDSBlock
     *
     * Get details of the most recent Directory Service block.
     *
     * @returns {Promise<RPCResponse<DsBlockObj, string>>}
     */
    getLatestDSBlock(): Promise<RPCResponse<DsBlockObj, string>>;
    /**
     * getNumDSBlocks
     *
     * Gets the number of DS blocks that the network has processed.
     *
     * @returns {Promise<RPCResponse<string, string>>}
     */
    getNumDSBlocks(): Promise<RPCResponse<string, string>>;
    /**
     * getDSBlockRate
     *
     * Gets the average rate of DS blocks processed per second
     *
     * @returns {Promise<RPCResponse<number, string>>}
     */
    getDSBlockRate(): Promise<RPCResponse<number, string>>;
    /**
     * getDSBlockListing
     *
     * Get a paginated list of Directory Service blocks. Pass in page number as
     * parameter. Returns a maxPages variable that specifies the max number of
     * pages. 1 - latest blocks, maxPages - oldest blocks.
     *
     * @param {number} max
     * @returns {Promise<RPCResponse<BlockList, string>>}
     */
    getDSBlockListing(max: number): Promise<RPCResponse<BlockList, string>>;
    /**
     * getTxBlock
     *
     * Get details of a Transaction block by block number.
     *
     * @param {number} blockNum
     * @returns {Promise<RPCResponse<TxBlockObj, string>>}
     */
    getTxBlock(blockNum: number): Promise<RPCResponse<TxBlockObj, string>>;
    /**
     * getLatestTxBlock
     *
     * Get details of the most recent Transaction block.
     *
     * @returns {Promise<RPCResponse<TxBlockObj, string>>}
     */
    getLatestTxBlock(): Promise<RPCResponse<TxBlockObj, string>>;
    /**
     * getNumTxBlocks
     *
     * Gets the total number of TxBlocks.
     *
     * @returns {Promise<RPCResponse<string, string>>}
     */
    getNumTxBlocks(): Promise<RPCResponse<string, string>>;
    /**
     * getTxBlockRate
     *
     * Gets the average number of Tx blocks per second.
     *
     * @returns {Promise<RPCResponse<number, string>>}
     */
    getTxBlockRate(): Promise<RPCResponse<number, string>>;
    /**
     * getTxBlockListing
     *
     * Get a paginated list of Transaction blocks. Takes a page number as
     * parameter, where each page contains a list of 10 blocks (max). Returns
     * a maxPages variable that specifies the max number of pages. 1 - latest
     * blocks, maxPages - oldest blocks.
     *
     * @param {number} max
     * @returns {Promise<RPCResponse<BlockList, string>>}
     */
    getTxBlockListing(max: number): Promise<RPCResponse<BlockList, string>>;
    /**
     * getNumTransactions
     *
     * Gets the number of transactions processed by the network so far.
     *
     * @returns {Promise<RPCResponse<string, string>>}
     */
    getNumTransactions(): Promise<RPCResponse<string, string>>;
    /**
     * getTransactionRate
     *
     * Gets the number of transactions processed per second
     *
     * @returns {Promise<RPCResponse<number, string>>}
     */
    getTransactionRate(): Promise<RPCResponse<number, string>>;
    /**
     * getCurrentMiniEpoch
     *
     * Gets the current Tx Epoch.
     *
     * @returns {Promise<RPCResponse<string, string>>}
     */
    getCurrentMiniEpoch(): Promise<RPCResponse<string, string>>;
    /**
     * getCurrentDSEpoch
     *
     * Gets the current DS Epoch.
     *
     * @returns {Promise<RPCResponse<any, string>>}
     */
    getCurrentDSEpoch(): Promise<RPCResponse<any, string>>;
    /**
     * getPrevDifficulty
     *
     * Gets shard difficulty for previous PoW round
     *
     * @returns {Promise<RPCResponse<number, string>>}
     */
    getPrevDifficulty(): Promise<RPCResponse<number, string>>;
    /**
     * getPrevDSDifficulty
     *
     * Gets DS difficulty for previous PoW round
     *
     * @returns {Promise<RPCResponse<number, string>>}
     */
    getPrevDSDifficulty(): Promise<RPCResponse<number, string>>;
    /**
     * createTransaction
     *
     * Creates a transaction and polls the lookup node for a transaction
     * receipt. The transaction is considered to be lost if it is not confirmed
     * within the timeout period.
     *
     * @param {Transaction} tx
     * @param {number} maxAttempts - (optional) number of times to poll before timing out
     * @param {number} number - (optional) interval in ms
     * @returns {Promise<Transaction>} - the Transaction that has been signed and
     * broadcasted to the network.
     */
    createTransaction(tx: Transaction, maxAttempts?: number, interval?: number): Promise<Transaction>;
    /**
     * getTransaction
     *
     * Retrieves a transaction from the blockchain by its hash. If the result
     * contains an Error, a rejected Promise is returned with the erorr message.
     * If it does not contained an error, but `receipt.success` is `false`, then
     * a rejected Transaction instance is returned.
     *
     * @param {string} txHash
     * @returns {Promise<any>}
     */
    getTransaction(txHash: string): Promise<Transaction>;
    /**
     * getRecentTransactions
     *
     * Gets a list of recent transactions
     *
     * @returns {Promise<RPCResponse<TxList, never>>}
     */
    getRecentTransactions(): Promise<RPCResponse<TxList, never>>;
    /**
     * getTransactionsForTxBlock
     *
     * Gets all transactions for a given TxBlock, grouped by shard id
     *
     * @param {number} txBlock
     * @returns {Promise<RPCResponse<string[][], string>>}
     */
    getTransactionsForTxBlock(txBlock: number): Promise<RPCResponse<string[][], string>>;
    /**
     * getNumTxnsTxEpoch
     *
     * Gets the number of transactions procesed for a given Tx Epoch.
     *
     * @param {number} epoch
     * @returns {Promise<RPCResponse<number, never>>}
     */
    getNumTxnsTxEpoch(epoch: number): Promise<RPCResponse<string, string>>;
    /**
     * getNumTxnsDSEpoch
     *
     * Gets the number of transactions procesed for a given DS Epoch.
     *
     * @param {number} epoch
     * @returns {Promise<any>}
     */
    getNumTxnsDSEpoch(epoch: number): Promise<RPCResponse<string, string>>;
    /**
     * getMinimumGasPrice
     *
     * Gets the numeric minimum gas price
     *
     * @returns {Promise<RPCResponse<string, string>>}
     */
    getMinimumGasPrice(): Promise<RPCResponse<string, string>>;
    /**
     * getBalance
     *
     * Gets the balance of an account by address
     *
     * @param {string} address
     * @returns {Promise<RPCResponse<any, string>>}
     */
    getBalance(address: string): Promise<RPCResponse<any, string>>;
    /**
     * getSmartContractCode
     *
     * @param {string} address
     * @returns {Promise<RPCResponse< code: string }, string>>}
     */
    getSmartContractCode(address: string): Promise<RPCResponse<{
        code: string;
    }, string>>;
    /**
     * getSmartContractInit
     *
     * @param {string} address
     * @returns {Promise<RPCResponse<Value[], string>>}
     */
    getSmartContractInit(address: string): Promise<RPCResponse<Value[], string>>;
    /**
     * getSmartContractState
     *
     * @param {string} address
     * @returns {Promise<RPCResponse<Value[], string>>}
     */
    getSmartContractState(address: string): Promise<RPCResponse<Value[], string>>;
    /**
     * getSmartContracts
     *
     * @param {string} address
     * @returns {Promise<RPCResponse<Omit<ContractObj, 'init' | 'abi'>, string>>}
     */
    getSmartContracts(address: string): Promise<RPCResponse<Omit<ContractObj, 'init' | 'abi'>, string>>;
    /**
     * getContractAddressFromTransactionID
     *
     * @param {string} txHash
     * @returns {Promise<RPCResponse<string, string>>}
     */
    getContractAddressFromTransactionID(txHash: string): Promise<RPCResponse<string, string>>;
}
//# sourceMappingURL=chain.d.ts.map