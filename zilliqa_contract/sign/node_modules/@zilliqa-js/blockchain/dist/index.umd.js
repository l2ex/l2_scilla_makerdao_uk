(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@zilliqa-js/util'), require('@zilliqa-js/account'), require('@zilliqa-js/core')) :
    typeof define === 'function' && define.amd ? define(['exports', '@zilliqa-js/util', '@zilliqa-js/account', '@zilliqa-js/core'], factory) :
    (factory((global.zjsBlockchain = {}),global.zjsUtil,global.zjsAccount,global.zjsCore));
}(this, (function (exports,util,account,core) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
                t[p[i]] = s[p[i]];
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function toTxParams(response) {
        var _a = response.result, toAddr = _a.toAddr, gasPrice = _a.gasPrice, gasLimit = _a.gasLimit, amount = _a.amount, nonce = _a.nonce, receipt = _a.receipt, version = _a.version, rest = __rest(_a, ["toAddr", "gasPrice", "gasLimit", "amount", "nonce", "receipt", "version"]);
        return __assign({}, rest, { version: parseInt(version, 10), toAddr: toAddr, gasPrice: new util.BN(gasPrice), gasLimit: util.Long.fromString(gasLimit, 10), amount: new util.BN(amount), receipt: __assign({}, receipt, { cumulative_gas: parseInt(receipt.cumulative_gas, 10) }) });
    }

    var Blockchain = /** @class */ (function () {
        function Blockchain(provider, signer) {
            this.provider = provider;
            this.provider.middleware.request.use(account.util.formatOutgoingTx, "CreateTransaction" /* CreateTransaction */);
            this.signer = signer;
        }
        /**
         * getBlockChainInfo
         *
         * @returns {Promise<RPCResponse<BlockchainInfo, string>>}
         */
        Blockchain.prototype.getBlockChainInfo = function () {
            return this.provider.send("GetBlockchainInfo" /* GetBlockchainInfo */);
        };
        /**
         * getShardingStructure
         *
         * @returns {Promise<RPCResponse<ShardingStructure, string>>}
         */
        Blockchain.prototype.getShardingStructure = function () {
            return this.provider.send("GetShardingStructure" /* GetShardingStructure */);
        };
        /**
         * getDSBlock
         *
         * Get details of a Directory Service block by block number.
         *
         * @param {number} blockNum
         * @returns {Promise<RPCResponse<DsBlockObj, string>>}
         */
        Blockchain.prototype.getDSBlock = function (blockNum) {
            return this.provider.send("GetDsBlock" /* GetDSBlock */, blockNum.toString());
        };
        /**
         * getLatestDSBlock
         *
         * Get details of the most recent Directory Service block.
         *
         * @returns {Promise<RPCResponse<DsBlockObj, string>>}
         */
        Blockchain.prototype.getLatestDSBlock = function () {
            return this.provider.send("GetLatestDsBlock" /* GetLatestDSBlock */);
        };
        /**
         * getNumDSBlocks
         *
         * Gets the number of DS blocks that the network has processed.
         *
         * @returns {Promise<RPCResponse<string, string>>}
         */
        Blockchain.prototype.getNumDSBlocks = function () {
            return this.provider.send("GetNumDSBlocks" /* GetNumDSBlocks */);
        };
        /**
         * getDSBlockRate
         *
         * Gets the average rate of DS blocks processed per second
         *
         * @returns {Promise<RPCResponse<number, string>>}
         */
        Blockchain.prototype.getDSBlockRate = function () {
            return this.provider.send("GetDSBlockRate" /* GetDSBlockRate */);
        };
        /**
         * getDSBlockListing
         *
         * Get a paginated list of Directory Service blocks. Pass in page number as
         * parameter. Returns a maxPages variable that specifies the max number of
         * pages. 1 - latest blocks, maxPages - oldest blocks.
         *
         * @param {number} max
         * @returns {Promise<RPCResponse<BlockList, string>>}
         */
        Blockchain.prototype.getDSBlockListing = function (max) {
            return this.provider.send("DSBlockListing" /* DSBlockListing */, max);
        };
        /**
         * getTxBlock
         *
         * Get details of a Transaction block by block number.
         *
         * @param {number} blockNum
         * @returns {Promise<RPCResponse<TxBlockObj, string>>}
         */
        Blockchain.prototype.getTxBlock = function (blockNum) {
            return this.provider.send("GetTxBlock" /* GetTxBlock */, blockNum.toString());
        };
        /**
         * getLatestTxBlock
         *
         * Get details of the most recent Transaction block.
         *
         * @returns {Promise<RPCResponse<TxBlockObj, string>>}
         */
        Blockchain.prototype.getLatestTxBlock = function () {
            return this.provider.send("GetLatestTxBlock" /* GetLatestTxBlock */);
        };
        /**
         * getNumTxBlocks
         *
         * Gets the total number of TxBlocks.
         *
         * @returns {Promise<RPCResponse<string, string>>}
         */
        Blockchain.prototype.getNumTxBlocks = function () {
            return this.provider.send("GetNumTxBlocks" /* GetNumTxBlocks */);
        };
        /**
         * getTxBlockRate
         *
         * Gets the average number of Tx blocks per second.
         *
         * @returns {Promise<RPCResponse<number, string>>}
         */
        Blockchain.prototype.getTxBlockRate = function () {
            return this.provider.send("GetTxBlockRate" /* GetTxBlockRate */);
        };
        /**
         * getTxBlockListing
         *
         * Get a paginated list of Transaction blocks. Takes a page number as
         * parameter, where each page contains a list of 10 blocks (max). Returns
         * a maxPages variable that specifies the max number of pages. 1 - latest
         * blocks, maxPages - oldest blocks.
         *
         * @param {number} max
         * @returns {Promise<RPCResponse<BlockList, string>>}
         */
        Blockchain.prototype.getTxBlockListing = function (max) {
            return this.provider.send("TxBlockListing" /* TxBlockListing */, max);
        };
        /**
         * getNumTransactions
         *
         * Gets the number of transactions processed by the network so far.
         *
         * @returns {Promise<RPCResponse<string, string>>}
         */
        Blockchain.prototype.getNumTransactions = function () {
            return this.provider.send("GetNumTransactions" /* GetNumTransactions */);
        };
        /**
         * getTransactionRate
         *
         * Gets the number of transactions processed per second
         *
         * @returns {Promise<RPCResponse<number, string>>}
         */
        Blockchain.prototype.getTransactionRate = function () {
            return this.provider.send("GetTransactionRate" /* GetTransactionRate */);
        };
        /**
         * getCurrentMiniEpoch
         *
         * Gets the current Tx Epoch.
         *
         * @returns {Promise<RPCResponse<string, string>>}
         */
        Blockchain.prototype.getCurrentMiniEpoch = function () {
            return this.provider.send("GetCurrentMiniEpoch" /* GetCurrentMiniEpoch */);
        };
        /**
         * getCurrentDSEpoch
         *
         * Gets the current DS Epoch.
         *
         * @returns {Promise<RPCResponse<any, string>>}
         */
        Blockchain.prototype.getCurrentDSEpoch = function () {
            return this.provider.send("GetCurrentDSEpoch" /* GetCurrentDSEpoch */);
        };
        /**
         * getPrevDifficulty
         *
         * Gets shard difficulty for previous PoW round
         *
         * @returns {Promise<RPCResponse<number, string>>}
         */
        Blockchain.prototype.getPrevDifficulty = function () {
            return this.provider.send("GetPrevDifficulty" /* GetPrevDifficulty */);
        };
        /**
         * getPrevDSDifficulty
         *
         * Gets DS difficulty for previous PoW round
         *
         * @returns {Promise<RPCResponse<number, string>>}
         */
        Blockchain.prototype.getPrevDSDifficulty = function () {
            return this.provider.send("GetPrevDSDifficulty" /* GetPrevDSDifficulty */);
        };
        /**
         * createTransaction
         *
         * Creates a transaction and polls the lookup node for a transaction
         * receipt. The transaction is considered to be lost if it is not confirmed
         * within the timeout period.
         *
         * @param {Transaction} tx
         * @param {number} maxAttempts - (optional) number of times to poll before timing out
         * @param {number} number - (optional) interval in ms
         * @returns {Promise<Transaction>} - the Transaction that has been signed and
         * broadcasted to the network.
         */
        Blockchain.prototype.createTransaction = function (tx, maxAttempts, interval) {
            if (maxAttempts === void 0) { maxAttempts = core.GET_TX_ATTEMPTS; }
            if (interval === void 0) { interval = 1000; }
            return __awaiter(this, void 0, void 0, function () {
                var response, err_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.provider.send("CreateTransaction" /* CreateTransaction */, __assign({}, tx.txParams, { priority: tx.toDS }))];
                        case 1:
                            response = _a.sent();
                            if (response.error) {
                                throw response.error;
                            }
                            return [2 /*return*/, tx.confirm(response.result.TranID, maxAttempts, interval)];
                        case 2:
                            err_1 = _a.sent();
                            throw err_1;
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * getTransaction
         *
         * Retrieves a transaction from the blockchain by its hash. If the result
         * contains an Error, a rejected Promise is returned with the erorr message.
         * If it does not contained an error, but `receipt.success` is `false`, then
         * a rejected Transaction instance is returned.
         *
         * @param {string} txHash
         * @returns {Promise<any>}
         */
        Blockchain.prototype.getTransaction = function (txHash) {
            return __awaiter(this, void 0, void 0, function () {
                var response, err_2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.provider.send("GetTransaction" /* GetTransaction */, txHash)];
                        case 1:
                            response = _a.sent();
                            if (response.error) {
                                return [2 /*return*/, Promise.reject(response.error)];
                            }
                            return [2 /*return*/, response.result.receipt.success
                                    ? account.Transaction.confirm(toTxParams(response), this.provider)
                                    : account.Transaction.reject(toTxParams(response), this.provider)];
                        case 2:
                            err_2 = _a.sent();
                            throw err_2;
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * getRecentTransactions
         *
         * Gets a list of recent transactions
         *
         * @returns {Promise<RPCResponse<TxList, never>>}
         */
        Blockchain.prototype.getRecentTransactions = function () {
            return this.provider.send("GetRecentTransactions" /* GetRecentTransactions */);
        };
        /**
         * getTransactionsForTxBlock
         *
         * Gets all transactions for a given TxBlock, grouped by shard id
         *
         * @param {number} txBlock
         * @returns {Promise<RPCResponse<string[][], string>>}
         */
        Blockchain.prototype.getTransactionsForTxBlock = function (txBlock) {
            return this.provider.send("GetTransactionsForTxBlock" /* GetTransactionsForTxBlock */, txBlock.toString());
        };
        /**
         * getNumTxnsTxEpoch
         *
         * Gets the number of transactions procesed for a given Tx Epoch.
         *
         * @param {number} epoch
         * @returns {Promise<RPCResponse<number, never>>}
         */
        Blockchain.prototype.getNumTxnsTxEpoch = function (epoch) {
            return this.provider.send("GetNumTxnsTxEpoch" /* GetNumTxnsTxEpoch */, epoch);
        };
        /**
         * getNumTxnsDSEpoch
         *
         * Gets the number of transactions procesed for a given DS Epoch.
         *
         * @param {number} epoch
         * @returns {Promise<any>}
         */
        Blockchain.prototype.getNumTxnsDSEpoch = function (epoch) {
            return this.provider.send("GetNumTxnsDSEpoch" /* GetNumTxnsDSEpoch */, epoch);
        };
        /**
         * getMinimumGasPrice
         *
         * Gets the numeric minimum gas price
         *
         * @returns {Promise<RPCResponse<string, string>>}
         */
        Blockchain.prototype.getMinimumGasPrice = function () {
            return this.provider.send("GetMinimumGasPrice" /* GetMinimumGasPrice */);
        };
        /**
         * getBalance
         *
         * Gets the balance of an account by address
         *
         * @param {string} address
         * @returns {Promise<RPCResponse<any, string>>}
         */
        Blockchain.prototype.getBalance = function (address) {
            return this.provider.send("GetBalance" /* GetBalance */, address);
        };
        /**
         * getSmartContractCode
         *
         * @param {string} address
         * @returns {Promise<RPCResponse< code: string }, string>>}
         */
        Blockchain.prototype.getSmartContractCode = function (address) {
            return this.provider.send("GetSmartContractCode" /* GetSmartContractCode */, address);
        };
        /**
         * getSmartContractInit
         *
         * @param {string} address
         * @returns {Promise<RPCResponse<Value[], string>>}
         */
        Blockchain.prototype.getSmartContractInit = function (address) {
            return this.provider.send("GetSmartContractInit" /* GetSmartContractInit */, address);
        };
        /**
         * getSmartContractState
         *
         * @param {string} address
         * @returns {Promise<RPCResponse<Value[], string>>}
         */
        Blockchain.prototype.getSmartContractState = function (address) {
            return this.provider.send("GetSmartContractState" /* GetSmartContractState */, address);
        };
        /**
         * getSmartContracts
         *
         * @param {string} address
         * @returns {Promise<RPCResponse<Omit<ContractObj, 'init' | 'abi'>, string>>}
         */
        Blockchain.prototype.getSmartContracts = function (address) {
            return this.provider.send("GetSmartContracts" /* GetSmartContracts */, address);
        };
        /**
         * getContractAddressFromTransactionID
         *
         * @param {string} txHash
         * @returns {Promise<RPCResponse<string, string>>}
         */
        Blockchain.prototype.getContractAddressFromTransactionID = function (txHash) {
            return this.provider.send("GetContractAddressFromTransactionID" /* GetContractAddressFromTransactionID */, txHash);
        };
        __decorate([
            core.sign,
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [account.Transaction, Number, Number]),
            __metadata("design:returntype", Promise)
        ], Blockchain.prototype, "createTransaction", null);
        return Blockchain;
    }());

    var NetworkMethods;
    (function (NetworkMethods) {
        NetworkMethods["GetClientVersion"] = "GetClientVersion";
        NetworkMethods["GetNetworkId"] = "GetNetworkId";
        NetworkMethods["GetProtocolVersion"] = "GetProtocolVersion";
    })(NetworkMethods || (NetworkMethods = {}));
    var Network = /** @class */ (function () {
        function Network(provider, signer) {
            this.provider = provider;
            this.signer = signer;
        }
        Network.prototype.getClientVersion = function () {
            return this.provider.send("GetClientVersion" /* GetClientVersion */);
        };
        Network.prototype.GetNetworkId = function () {
            return this.provider.send("GetNetworkId" /* GetNetworkId */);
        };
        Network.prototype.GetProtocolVersion = function (blockNum) {
            return this.provider.send("GetProtocolVersion" /* GetProtocolVersion */);
        };
        return Network;
    }());

    exports.Blockchain = Blockchain;
    exports.Network = Network;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=index.umd.js.map
