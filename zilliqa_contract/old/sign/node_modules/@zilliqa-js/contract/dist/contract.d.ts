import { Wallet, Transaction } from '@zilliqa-js/account';
import { Provider } from '@zilliqa-js/core';
import { Contracts } from './factory';
import { ABI, ContractStatus, Init, State, Value, CallParams, DeployParams } from './types';
export declare class Contract {
    factory: Contracts;
    provider: Provider;
    signer: Wallet;
    init: Init;
    abi?: ABI;
    state?: State;
    address?: string;
    code?: string;
    status: ContractStatus;
    constructor(factory: Contracts, code?: string, abi?: ABI, address?: string, init?: any, state?: any);
    /**
     * isInitialised
     *
     * Returns true if the contract has not been deployed
     *
     * @returns {boolean}
     */
    isInitialised(): boolean;
    /**
     * isDeployed
     *
     * Returns true if the contract is deployed
     *
     * @returns {boolean}
     */
    isDeployed(): boolean;
    /**
     * isRejected
     *
     * Returns true if an attempt to deploy the contract was made, but the
     * underlying transaction was unsuccessful.
     *
     * @returns {boolean}
     */
    isRejected(): boolean;
    prepareTx(tx: Transaction, attempts?: number, interval?: number): Promise<Transaction>;
    /**
     * deploy
     *
     * @param {DeployParams} params
     * @returns {Promise<Contract>}
     */
    deploy(params: DeployParams, attempts?: number, interval?: number, toDs?: boolean): Promise<[Transaction, Contract]>;
    /**
     * call
     *
     * @param {string} transition
     * @param {any} params
     * @returns {Promise<Transaction>}
     */
    call(transition: string, args: Value[], params: CallParams, attempts?: number, interval?: number, toDs?: boolean): Promise<Transaction>;
    getState(): Promise<State>;
}
//# sourceMappingURL=contract.d.ts.map